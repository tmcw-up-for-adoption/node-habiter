#!/usr/bin/env node

init.desc = 'create .habiterrc and .habiterdb files';
sums.desc = 'total completions';
sub.desc = 'pop last completion';
del.desc = 'erase task';
add.desc = 'record a completion';
week.desc = 'week summary by day';
last.desc = 'last completion';
ls.desc = 'list habits';

var commands = {
    init: init,
    add: curry(bootstrapDB, checkn(2), add),
    del: curry(bootstrapDB, checkn(2), del),
    sub: curry(bootstrapDB, checkn(2), sub),
    sums: curry(bootstrapDB, sums),
    ls: curry(bootstrapDB, ls),
    last: curry(bootstrapDB, last),
    week: curry(bootstrapDB, week)
};

var optimist = require('optimist')
    .usage('Usage: habiter [' + Object.keys(commands).join(',') + ']\n\n' +
    Object.keys(commands).map(function(k) {
        return k + ': ' + commands[k].desc;
    }).join('\n')),
    moment = require('moment');
var fs = require('fs');

var env = {};

function jsonFile(f) {
    return JSON.parse(fs.readFileSync(f));
}

function saveDB(db) {
    return fs.writeFileSync(env.dbPath, JSON.stringify(db));
}

function curry() {
    var fns = arguments;
    var ret = function() {
        for (var i = 0; i < fns.length; i++) fns[i].apply(fns[i], arguments);
    };
    ret.desc = arguments[arguments.length - 1].desc;
    return ret;
}

function checkn(n) {
    return function() {
        if (argv._.length < n) {
            optimist.showHelp();
            process.exit();
        }
    }
}

function bootstrapDB() {
    try {
        env.rcPath = process.env.HOME + '/.habiterrc';
        env.rc = jsonFile(env.rcPath);
        env.dbPath = env.rc.db || process.env.HOME + '/.habiterdb';
        env.db = jsonFile(env.dbPath);
    } catch(e) {
        console.warn('run habiter init');
        process.exit();
    }
}

function init() {
    var rcPath = process.env.HOME + '/.habiterrc',
        dbPath = process.env.HOME + '/.habiterdb';

    fs.writeFileSync(rcPath, '{}');
    fs.writeFileSync(dbPath, '{}');
}

function ls() {
    var habits = Object.keys(env.db);
    console.log(habits.length ? habits.join(', ') : 'No habits yet.');
}

function day(d) {
    return [d.getFullYear(), d.getMonth() + 1, d.getDate() + 1].join('-');
}

function sums() {
    function total(mem, h) { return h.n + mem; }
    function print(k) { console.log(env.db[k].reduce(total, 0), k); }
    Object.keys(env.db).forEach(print);
}

function last() {
    function last(k) {
        console.log(moment(env.db[k][env.db[k].length - 1].date).format('YYYY-MM-DD'), k);
    }
    Object.keys(env.db).forEach(last);
}

function week() {
    var today = new Date(),
        weekago = new Date((+today) - (7 * 24 * 60 * 60 * 1000)),
        habits = Object.keys(env.db),
        weekdb = {};
    for (var i = 0; i < habits.length; i++) {
        var habitlist = env.db[habits[i]];
        var byday = {};
        for (var j = habitlist.length - 1; j >= 0; j--) {
            var d = new Date(habitlist[j].date);
            if (+d < weekago) break;
            if (!byday[day(d)]) byday[day(d)] = 0;
            byday[day(d)]++;
        }
        weekdb[habits[i]] = byday;
    }
    for (var habit in weekdb) {
        for (var k = 0; k < 7; k++) {
        }
    }
}

function add() {
    var db = env.db;
    if (!db[argv._[1]]) db[argv._[1]] = [];
    var n = argv._[2] ? parseInt(argv._[2], 10) : 1;
    db[argv._[1]].push({
        date: new Date(),
        n: n
    });
    saveDB(db);
}

function sub() {
    var db = env.db,
        habitName = argv._[1];
    if (db[habitName] && db[habitName].length) off = db[habitName].pop();
    if (db[habitName] && !db[habitName].length) delete db[habitName];
    if (off) console.log('popped completion at ', off.date);
    else console.log('no habit called ' + habitName);
    saveDB(db);
}

function del() {
    var db = env.db,
        habitName = argv._[1];
    delete db[habitName];
    console.log('removed all instances of ' + habitName);
    saveDB(db);
}

function shorthand(str) {
    return (str && Object.keys(commands).filter(function(c) {
        return c.indexOf(str) === 0;
    })[0]) || process.exit(console.warn('command not found, valid commands: ' +
        Object.keys(commands).join(', ')));
}

var argv = optimist.argv;

if (!argv._.length) return optimist.showHelp();
commands[shorthand(argv._[0])](argv);
