#!/usr/bin/env node

var optimist = require('optimist')
    .usage('Usage: habiter [add,sub] HABIT COUNT'),
    fs = require('fs');

var env = {};

function jsonFile(f) {
    return JSON.parse(fs.readFileSync(f));
}

function saveDB(db) {
    return fs.writeFileSync(env.dbPath, JSON.stringify(db));
}

function bootstrapDB() {
    try {
        env.rcPath = process.env.HOME + '/.habiterrc';
        env.rc = jsonFile(env.rcPath);
        env.dbPath = env.rc.db || process.env.HOME + '/.habiterdb';
        env.db = jsonFile(env.dbPath);
    } catch(e) {
        console.warn('run habiter init');
        process.exit();
    }
}

function init() {
    var rcPath = process.env.HOME + '/.habiterrc',
        dbPath = process.env.HOME + '/.habiterdb';

    fs.writeFileSync(rcPath, '{}');
    fs.writeFileSync(dbPath, '{}');
}

function ls() {
    bootstrapDB();
    var habits = Object.keys(env.db);

    console.log(habits.length ? habits.join(', ') : 'No habits yet.');
}

function add() {
    if (argv._.length < 2) return optimist.showHelp();
    bootstrapDB();
    var db = env.db;
    if (!db[argv._[1]]) db[argv._[1]] = [];
    db[argv._[1]].push({
        date: new Date(),
        n: 1
    });
    saveDB(db);
}

function sub() {
    if (argv._.length < 2) return optimist.showHelp();
    bootstrapDB();
    var db = env.db, off;
    var habitName = argv._[1];
    if (db[habitName] && db[habitName].length) off = db[habitName].pop();
    if (db[habitName] && !db[habitName].length) delete db[habitName];
    if (off) console.log('popped completion at ', off.date);
    else console.log('no habit called ' + habitName);
    saveDB(db);
}

function del() {
    if (argv._.length < 2) return optimist.showHelp();
    bootstrapDB();
    var db = env.db;
    var habitName = argv._[1];
    delete db[habitName];
    console.log('removed all instances of ' + habitName);
    saveDB(db);
}

function load() {
    return jsonFile(dbPath);
}

var commands = {
    init: init,
    add: add,
    del: del,
    sub: sub,
    ls: ls
};

function shorthand(str) {
    return (str && Object.keys(commands).filter(function(c) {
        return c.indexOf(str) === 0;
    })[0]) || process.exit(console.warn('command not found, valid commands: ' +
        Object.keys(commands).join(', ')));
}

var argv = optimist.argv;

if (!argv._.length) return optimist.showHelp();
commands[shorthand(argv._[0])](argv);
